// Generated by Copilot (GPT-4.1) on 2025-06-30 14:01 PDT.
// This file defines TypeScript interfaces and enums for module schema in copilot-instructions-builder.

export enum ModuleType {
  Base = 'base',
  Domain = 'domain',
  Task = 'task',
}

/**
 * Merge strategies for instruction sections.
 */
export enum MergeStrategy {
  Replace = 'replace',
  Append = 'append',
  Prepend = 'prepend',
  SmartMerge = 'smart_merge',
}

/**
 * Module categories.
 */
export enum Category {
  Frontend = 'frontend',
  Backend = 'backend',
  Testing = 'testing',
  DevOps = 'devops',
  General = 'general',
}

/**
 * Metadata for a module.
 */
export interface Metadata {
  /** Description of the module */
  description: string;
  /** Author of the module */
  author: string;
  /** Category of the module */
  category: Category;
  /** Weight for ordering or scoring */
  weight: number;
}

/**
 * Conditional logic for instruction inclusion/exclusion.
 */
export interface Conditions {
  /** Expression to include this section if true */
  include_if?: string;
  /** Expression to exclude this section if true */
  exclude_if?: string;
  /** Required module IDs */
  require_modules?: string[];
  /** Conflicting module IDs */
  conflict_with?: string[];
}

/**
 * Instruction section within a module.
 */
export interface InstructionSection {
  /** Unique section ID */
  id: string;
  /** Instruction content (may use template variables) */
  content: string;
  /** Merge strategy for this section */
  merge_strategy: MergeStrategy;
  /** Optional conditions for inclusion/exclusion */
  conditions?: Conditions;
}

/**
 * Hooks for pre- and post-composition.
 */
export interface Hooks {
  /** Scripts or commands to run before composition */
  pre_compose?: string[];
  /** Scripts or commands to run after composition */
  post_compose?: string[];
}

/**
 * Main module schema interface.
 */
export interface ModuleSchema {
  /** Unique module ID */
  id: string;
  /** Human-readable name */
  name: string;
  /** Module type */
  type: ModuleType;
  /** Semantic version (e.g., 1.0.0) */
  version: string;
  /** IDs of required modules */
  dependencies?: string[];
  /** IDs of conflicting modules */
  conflicts?: string[];
  /** Tags for searching/filtering */
  tags?: string[];
  /** Module priority (base=1.0, domain=1.2, task=1.5) */
  priority: 1.0 | 1.2 | 1.5;
  /** Metadata object */
  metadata: Metadata;
  /** Template variables for substitution */
  variables?: Record<string, unknown>;
  /** Instruction sections */
  instructions: InstructionSection[];
  /** Optional hooks for pre/post composition */
  hooks?: Hooks;
}
